name: Workflow CI
 
on:
  pull_request:
    # types: [closed]
    branches:
      - main

jobs:
  build:
    name: test-build
    # if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
         
    strategy:
      matrix:
        node-version: [20.x]
 
    steps:
 
      - name: Start MySQL
        run: |

          sudo systemctl start mysql
          sudo systemctl status mysql

      - name: Configure MySQL
        run: |
         sudo mysql -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "CREATE DATABASE IF NOT EXISTS ${{ secrets.DB }};"
         sudo mysql -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "CREATE USER IF NOT EXISTS '${{ secrets.DB_USER }}'@'localhost' IDENTIFIED BY '${{ secrets.DB_PASSWORD }}';"
         sudo mysql -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "GRANT ALL PRIVILEGES ON ${{ secrets.DB }}.* TO '${{ secrets.DB_USER }}'@'localhost';"
         sudo mysql -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "FLUSH PRIVILEGES;"

      - uses: actions/checkout@v2
 
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
    
      - name: Set up environment variables
        run: |         
          echo "DB_USER=${{ secrets.DB_USER}}" > .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB=${{ secrets.DB }}" >> .env
          echo "HOST=${{ secrets.HOST }}" >> .env
          echo "DIALECT=${{ secrets.DIALECT }}" >> .env
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env
          echo "TOPIC_NAME=${{ secrets.TOPIC_NAME }}" >> .env

      - name: Install Dependencies
        run: npm install

      - name: Start the application
        run: |
            npm start &
        
      - name: Wait for the application to be ready
        run: |
            sleep 10
            until curl -s http://localhost:8080; do
              sleep 5
            done

      - name: Run Tests
        run: npm test
      
      - name: Delete .env file
        run: rm .env

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
  
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
  
      - name: 'Use gcloud CLI'
        run: 'gcloud info'
        
      - name: Create webapp.zip
        run: |
            zip -r webapp.zip ./

      # - name: Install Packer
      #   run: |
      #     curl -fsSL https://releases.hashicorp.com/packer/1.7.5/packer_1.7.5_linux_amd64.zip -o packer.zip
      #     unzip packer.zip -d /tmp
      #     sudo mv /tmp/packer /usr/bin/packer
      #     packer --version

      - name: Initialize Packer
        run: packer init packer-config/custom_image.pkr.hcl

      - name: Format Packer template
        run: packer fmt -check packer-config/custom_image.pkr.hcl

      - name: Validate Packer template
        run: packer validate -var 'project_id=${{ secrets.GCP_PROJECT_ID }}' packer-config/custom_image.pkr.hcl
      

      - name: Build custom image
        run:  packer build -var 'project_id=${{ secrets.GCP_PROJECT_ID }}'  packer-config/custom_image.pkr.hcl

      - name: Get Latest Image ID
        id: get_latest_image_id
        run: |
            IMAGE_ID=$(gcloud compute images list --filter="name=^${{ secrets.IMAGE_NAME_PREFIX }}-*" --sort-by="creationTimestamp desc" --format="value(ID)" | head -n 1)
            echo "::set-output name=image_id::$IMAGE_ID"
     
      - name: Generate Random ID
        id: generate_random_id
        run: |
            RANDOM_ID=$(date +%s | md5sum | head -c 6)
            echo "::set-output name=random_id::$RANDOM_ID"
          
      # - name: Create new Instance Template version
      #   run: |
      #       RANDOM_ID=$(echo ${{ steps.generate_random_id.outputs.random_id }})
      #       TEMPLATE_NAME="webapp-instance-template-${RANDOM_ID}"
      #       gcloud compute instance-templates create $TEMPLATE_NAME 
          
      #       --description=${{ secrets.WEBAPP_TEMPLATE_DESCRIPTION }} \
      #       --machine-type=${{ secrets.MACHINE_TYPE }} \
      #       --region=${{ secrets.REGION }} \
      #       --create-disk=image=${{ steps.get_latest_image_id.outputs.image_id }},auto-delete=yes,boot=yes \
      #       size= ${{ secrets.DISK_SIZE }}, type= ${{ secrets.DISK_TYPE }} \
      #       --metadata=startup-script=" #!/bin/bash
      #       ENV_FILE="/opt/webapp/.env"
      #       if [ ! -f "$ENV_FILE" ]; then
      #         echo "HOST=${{ secrets.SQL_HOST }}" > /opt/webapp/.env
      #         echo "DB_PASSWORD=${{ secrets.SQL_DB_PASSWORD }}" >> /opt/webapp/.env
      #         echo "DB_USER==${{ secrets.SQL_DB_USER }}" >> /opt/webapp/.env
      #         echo "DB=${{ secrets.SQL_DB }}" >> /opt/webapp/.env
      #         echo "DIALECT=${{ secrets.SQL_DIALECT }}" >> /opt/webapp/.env
      #         echo "TOPIC_NAME=${{ secrets.SQL_TOPIC_NAME }}" >> /opt/webapp/.env
      #         echo "LOGPATH=${{ secrets.SQL_LOGPATH }}" >> /opt/webapp/.env
      #       else
      #           echo "$ENV_FILE file already exists."
      #       fi
      #       sudo ./opt/webapp/packer-config/configure_systemd.sh
      #       "
      #       --tags=${{ secrets.TARGET_TAGS_HTTP }} \
      #       --scopes=${{ secrets.SCOPES }} \ 
      #       --service-account=${{ secrets.EMAIL }} \
      #       --network-interface=[network=${{ secrets.VPC_NETWORK }},subnet=${{ secrets.WEBAPP_SUBNET }}] \
      #       --kms-key=projects/${{ secrets.GCP_PROJECT_ID }}/locations/${{ secrets. REGION }}/keyRings/${{ secrets.KMS_KEYRING }}/ cryptoKeys/${{ secrets.KEY_NAME }} 

      - name: Create new Instance Template version
        run: |
          RANDOM_ID=$(echo ${{ steps.generate_random_id.outputs.random_id }})
          TEMPLATE_NAME="webapp-instance-template-${RANDOM_ID}"
          gcloud compute instance-templates create $TEMPLATE_NAME \
            --description=${{ secrets.WEBAPP_TEMPLATE_DESCRIPTION }} \
            --machine-type=${{ secrets.MACHINE_TYPE }} \
            --region=${{ secrets.REGION }} \
            --create-disk=image=${{ steps.get_latest_image_id.outputs.image_id }},auto-delete=yes,boot=yes,size=${{ secrets.DISK_SIZE }},type=${{ secrets.DISK_TYPE }} \
            --metadata=startup-script="#!/bin/bash
            ENV_FILE=\"/opt/webapp/.env\"
            if [ ! -f \"$ENV_FILE\" ]; then
            echo \"HOST=${{ secrets.SQL_HOST }}\" > /opt/webapp/.env
            echo \"DB_PASSWORD=${{ secrets.SQL_DB_PASSWORD }}\" >> /opt/webapp/.env
            echo \"DB_USER==${{ secrets.SQL_DB_USER }}\" >> /opt/webapp/.env
            echo \"DB=${{ secrets.SQL_DB }}\" >> /opt/webapp/.env
            echo \"DIALECT=${{ secrets.SQL_DIALECT }}\" >> /opt/webapp/.env
            echo \"TOPIC_NAME=${{ secrets.SQL_TOPIC_NAME }}\" >> /opt/webapp/.env
            echo \"LOGPATH=${{ secrets.SQL_LOGPATH }}\" >> /opt/webapp/.env
            else
              echo \"$ENV_FILE file already exists.\"
            fi
            /opt/webapp/packer-config/configure_systemd.sh" \
            --tags=${{ secrets.TARGET_TAGS_HTTP }} \
            --scopes=${{ secrets.SCOPES }} \
            --service-account=${{ secrets.EMAIL }} \
            --network-interface=network=${{ secrets.VPC_NETWORK }},subnet=${{ secrets.WEBAPP_SUBNET }} \
            --kms-key=projects/${{ secrets.GCP_PROJECT_ID }}/locations/${{ secrets.REGION }}/keyRings/${{ secrets.KMS_KEYRING }}/cryptoKeys/${{ secrets.KEY_NAME }} 



      - name: Update Managed Instance Group with new template
        run: | 
          gcloud compute instance-groups managed set-instance-template webapp_instance_group_manager --template=$TEMPLATE_NAME

      # - name: Recreate instances in Managed Instance Group
      #   run: |
      #     gcloud compute instance-groups managed recreate-instances webapp_instance_group_manager




      - name: Start rolling update for Managed Instance Group
        run: |
          gcloud compute instance-groups managed rolling-action start-update webapp_instance_group_manager --version=template=$TEMPLATE_NAME \
          [--region=${{ secrets. REGION }}]

      - name: Wait for Managed Instance Group refresh to complete
        run: |
          gcloud compute instance-groups managed wait-until webapp_instance_group_manager \
          --version-target-reached \
          [--region=${{ secrets. REGION }}]
      
      # - name: Wait for Managed Instance Group refresh to complete
      #   run: |
      #     while true; do
      #       status=$(gcloud compute instance-groups managed describe webapp_instance_group_manager --zone=us-east1 --format=json | jq -r '.versionTarget.isReached')
      #       if [ "$status" = "true" ]; then
      #         break
      #       fi
      #       sleep 10
      #     done