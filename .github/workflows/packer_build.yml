name: Workflow CI
 
on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  build:
    name: test-build
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
         
    strategy:
      matrix:
        node-version: [20.x]
 
    steps:
 
      - name: Start MySQL
        run: |

          sudo systemctl start mysql
          sudo systemctl status mysql

      - name: Configure MySQL
        run: |
         sudo mysql -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "CREATE DATABASE IF NOT EXISTS ${{ secrets.DB }};"
         sudo mysql -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "CREATE USER IF NOT EXISTS '${{ secrets.DB_USER }}'@'localhost' IDENTIFIED BY '${{ secrets.DB_PASSWORD }}';"
         sudo mysql -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "GRANT ALL PRIVILEGES ON ${{ secrets.DB }}.* TO '${{ secrets.DB_USER }}'@'localhost';"
         sudo mysql -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "FLUSH PRIVILEGES;"

      - uses: actions/checkout@v2
 
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
    
      - name: Set up environment variables
        run: |         
          echo "DB_USER=${{ secrets.DB_USER}}" > .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB=${{ secrets.DB }}" >> .env
          echo "HOST=${{ secrets.HOST }}" >> .env
          echo "DIALECT=${{ secrets.DIALECT }}" >> .env
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env
          echo "TOPIC_NAME=${{ secrets.TOPIC_NAME }}" >> .env

      - name: Install Dependencies
        run: npm install

      - name: Start the application
        run: |
            npm start &
        
      - name: Wait for the application to be ready
        run: |
            sleep 10
            until curl -s http://localhost:8080; do
              sleep 5
            done

      - name: Run Tests
        run: npm test
      
      - name: Delete .env file
        run: rm .env

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
  
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
  
      - name: 'Use gcloud CLI'
        run: 'gcloud info'
        
      - name: Create webapp.zip
        run: |
            zip -r webapp.zip ./

      - name: Install Packer
        run: |
          curl -fsSL https://releases.hashicorp.com/packer/1.7.5/packer_1.7.5_linux_amd64.zip -o packer.zip
          unzip packer.zip -d /tmp
          sudo mv /tmp/packer /usr/bin/packer
          packer --version

      - name: Initialize Packer
        run: packer init packer-config/custom_image.pkr.hcl

      - name: Format Packer template
        run: packer fmt -check packer-config/custom_image.pkr.hcl

      - name: Validate Packer template
        run: packer validate -var 'project_id=${{ secrets.GCP_PROJECT_ID }}' packer-config/custom_image.pkr.hcl
      

      - name: Build custom image
        run:  packer build -var 'project_id=${{ secrets.GCP_PROJECT_ID }}'  packer-config/custom_image.pkr.hcl
 
      - name: Generate Random ID
        id: generate_random_id
        run: |
            RANDOM_ID=$(date +%s | md5sum | head -c 6)
            echo "::set-output name=random_id::$RANDOM_ID"
     
      - name: Create new Instance Template version
        run: |
            RANDOM_ID=$(echo ${{ steps.generate_random_id.outputs.random_id }})
            TEMPLATE_NAME="webapp-instance-template-${RANDOM_ID}"
            IMAGE_ID=$(jq -r '.builds[-1].artifact_id' manifest.json)

            IMAGE_NAME="projects/${{ secrets.GCP_PROJECT_ID }}/global/images/${IMAGE_ID}"
            gcloud compute instance-templates create $TEMPLATE_NAME \
            --machine-type=${{ secrets.MACHINE_TYPE }} \
            --region=${{ secrets.REGION }} \
            --create-disk=image=$IMAGE_NAME,device-name=${{ secrets.DEVICE_NAME }},size=${{ secrets.DISK_SIZE }},type=${{ secrets.DISK_TYPE }},boot=yes,auto-delete=yes,kms-key=projects/${{ secrets.GCP_PROJECT_ID }}/locations/${{ secrets.REGION }}/keyRings/${{ secrets.KEY_NAME }}/cryptoKeys/${{ secrets.VM_KMS_KEYNAME }} \
            --metadata=startup-script='#!/bin/bash
                    ENV_FILE="/opt/webapp/.env"
                    if [ ! -f "$ENV_FILE" ]; then
                      echo "HOST=${{ secrets.SQL_HOST }}" > /opt/webapp/.env
                      echo "DB_PASSWORD=${{ secrets.SQL_DB_PASSWORD }}" >> /opt/webapp/.env
                      echo "DB_USER=${{ secrets.SQL_DB_USER }}" >> /opt/webapp/.env
                      echo "DB=${{ secrets.SQL_DB }}" >> /opt/webapp/.env
                      echo "DIALECT=${{ secrets.SQL_DIALECT }}" >> /opt/webapp/.env
                      echo "TOPIC_NAME=${{ secrets.SQL_TOPIC_NAME }}" >> /opt/webapp/.env
                      echo "LOGPATH=${{ secrets.SQL_LOGPATH }}" >> /opt/webapp/.env
                    else
                      echo "$ENV_FILE file already exists."
                    fi
                    /opt/webapp/packer-config/configure_systemd.sh' \
            --tags=${{ secrets.TARGET_TAGS_HTTP }} \
            --scopes=${{ secrets.SCOPES }} \
            --service-account=${{ secrets.SERVICE_ACCOUNT }} \
            --network=${{ secrets.VPC_NETWORK }} \
            --subnet=${{ secrets.SUBNET }} \
            --instance-template-region=${{ secrets.REGION }}
           
      - name: Start set and rolling update for Managed Instance Group
        run: |    
         RANDOM_ID=$(echo ${{ steps.generate_random_id.outputs.random_id }})
         TEMPLATE_NAME="webapp-instance-template-${RANDOM_ID}"   

         gcloud compute instance-groups managed rolling-action start-update ${{ secrets.GROUP_MANAGER_NAME }} --version="template=projects/${{ secrets.GCP_PROJECT_ID }}/regions/${{ secrets.REGION }}/instanceTemplates/$TEMPLATE_NAME" \
         --region=${{ secrets.REGION }} \
         --max-unavailable=3  


      - name: Wait for Managed Instance Group refresh to complete
        run: |    
          gcloud compute instance-groups managed wait-until ${{ secrets.GROUP_MANAGER_NAME }} \
          --version-target-reached \
          --region=${{ secrets.REGION }}
        



